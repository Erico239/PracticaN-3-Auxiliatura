/*
TEMA: PERSISTENCIA DE OBJETOS

1. Sea el siguiente diagrama de clases:

- **Empleado**  
  - nombre: String  
  - edad: int  
  - salario: float  

- **ArchivoEmpleado**  
  - nomA: String  
    + ArchivoEmpleado(n:String)  
    + crearArchivo()  
    + guardarEmpleado(e:Empleado)  
    + buscarEmpleado(n:String):Empleado  
    + mayorSalario(s: float): Empleado  

a) Implementa el metodo guardarEmpleado(Empleado e) para almacenar empleados.
b) Implementa buscaEmpleado(String n) a traves del nombre, para ver los datos del Empleado n.
c) Implementa mayorSalario(float sueldo), que devuelva al primer empleado con sueldo mayor al ingresado.
*/

import java.io.*;
import java.util.ArrayList;
import java.util.List;

class Empleado implements Serializable {
    private String nombre;
    private int edad;
    private float salario;

    public Empleado(String nombre, int edad, float salario) {
        this.nombre = nombre;
        this.edad = edad;
        this.salario = salario;
    }

    public String getNombre() {
        return nombre;
    }

    public float getSalario() {
        return salario;
    }

    @Override
    public String toString() {
        return "Nombre: " + nombre + ", Edad: " + edad + ", Salario: " + salario;
    }
}

class ArchivoEmpleado {
    private String nomA;

    public ArchivoEmpleado(String nomA) {
        this.nomA = nomA;
    }

    public void crearArchivo() {
        try {
            File file = new File(nomA);
            if (file.createNewFile()) {
                System.out.println("Archivo creado: " + nomA);
            }
        } catch (IOException e) {
            System.err.println("Error al crear archivo: " + e.getMessage());
        }
    }

    // a) Implementacion de guardarEmpleado para almacenar empleados
    public void guardarEmpleado(Empleado e) {
        List<Empleado> empleados = leerEmpleados();
        empleados.add(e);
        
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(nomA))) {
            oos.writeObject(empleados);
        } catch (IOException ex) {
            System.err.println("Error al guardar: " + ex.getMessage());
        }
    }

    // b) Implementacion de buscarEmpleado por nombre
    public Empleado buscarEmpleado(String n) {
        List<Empleado> empleados = leerEmpleados();
        for (Empleado emp : empleados) {
            if (emp.getNombre().equals(n)) {
                return emp;
            }
        }
        return null;
    }

    // c) Implementacion de mayorSalario
    public Empleado mayorSalario(float sueldo) {
        List<Empleado> empleados = leerEmpleados();
        for (Empleado emp : empleados) {
            if (emp.getSalario() > sueldo) {
                return emp;
            }
        }
        return null;
    }

    // Método corregido para eliminar advertencias
    private List<Empleado> leerEmpleados() {
        List<Empleado> empleados = new ArrayList<>();
        File file = new File(nomA);
        
        if (file.exists() && file.length() > 0) {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(nomA))) {
                // Conversión segura usando ClassCastException
                Object obj = ois.readObject();
                if (obj instanceof List) {
                    for (Object item : (List<?>) obj) {
                        if (item instanceof Empleado) {
                            empleados.add((Empleado) item);
                        }
                    }
                }
            } catch (IOException | ClassNotFoundException e) {
                System.err.println("Error al leer: " + e.getMessage());
            }
        }
        return empleados;
    }
}

public class Main {
    public static void main(String[] args) {
        ArchivoEmpleado archivo = new ArchivoEmpleado("empleados.dat");
        archivo.crearArchivo();
        
        archivo.guardarEmpleado(new Empleado("Juan Perez", 35, 2500.50f));
        archivo.guardarEmpleado(new Empleado("Maria Lopez", 28, 3200.75f));
        archivo.guardarEmpleado(new Empleado("Carlos Ruiz", 42, 4100.25f));
        
        Empleado buscado = archivo.buscarEmpleado("Maria Lopez");
        System.out.println("Empleado encontrado: " + buscado);
        
        Empleado mejorPagado = archivo.mayorSalario(3000.0f);
        System.out.println("Empleado con salario > 3000: " + mejorPagado);
    }
}
